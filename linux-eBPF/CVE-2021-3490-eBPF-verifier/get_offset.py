vmlinux_path="~/Documents/CTF/d3bpf/linux-5.11/vmlinux"

#offset needed
global_variables=["array_map_ops","stack_map_ops","init_pid_ns"]
#cat /proc/kallsyms | grep init_pid_ns
struct_members=[
"p/x &(*(struct bpf_array*)0)->value",
"p/x &(*(struct bpf_array*)0)->map->ops",
"p/x &(*(struct bpf_array*)0)->map->btf",
"p/x &(*(struct btf*)0)->id",
"p/x &(*(struct bpf_map_info*)0)->btf_id", 
"p/x &(*(struct bpf_array*)0)->map->freeze_mutex->wait_list",
"p/x &(*(struct bpf_array*)0)->map->map_type",
"p/x &(*(struct bpf_array*)0)->map->max_entries",
"p/x &(*(struct bpf_array*)0)->map->spin_lock_off",
"p/x &(*(struct bpf_map_ops*)0)->map_push_elem",
"p/x &(*(struct bpf_map_ops*)0)->map_get_next_key",
"p/x &(*(struct pid_namespace*)0)->child_reaper",
"p/x &(*(struct task_struct*)0)->pid",
"p/x &(*(struct task_struct*)0)->cred",
"p/x &(*(struct task_struct*)0)->tasks->next",

]

try:
	import gdb
except ModuleNotFoundError:
	print("Usage: gdb -x ./get_offset.py")
	exit(0)

offset={}
gdb.execute('file '+vmlinux_path)
for item in global_variables:
	i=gdb.execute("p/x &"+item,to_string=True)
	i=hex(int(i.strip().split("= ")[1],16)-0xffffffff81000000)
	offset.update({item:i})

for item in struct_members:
	i=gdb.execute(item,to_string=True)
	i=i.strip().split("= ")[1]
	item=item.split("struct ")[1]
	item=item.replace("*)0)->","_")
	item=item.replace("->","_")
	item=item.replace(" ","")
	offset.update({item:i})
		
for key,value in offset.items():
	print("#define OFF_{0} {1}".format(key.upper(),value))
